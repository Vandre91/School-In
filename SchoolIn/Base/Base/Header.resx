<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAB//2Q==
</value>
  </data>
</root>